class Solution {
    public List<String> allLCS(String s1, String s2) {
        int n = s1.length();
        int m = s2.length();

        // Step 1: Build the DP table
        int[][] dp = new int[n + 1][m + 1];
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        // Step 2: Use DFS to find all LCS strings
        Set<String> resultSet = new HashSet<>();
        dfs(s1, s2, n, m, dp, new StringBuilder(), resultSet);

        // Step 3: Convert set to list and sort
        List<String> result = new ArrayList<>(resultSet);
        Collections.sort(result);
        return result;
    }
        
    }
    private void dfs(String s1, String s2, int i, int j, int[][] dp, StringBuilder path, Set<String> resultSet) {
        // Base case: reached start of strings
        if (i == 0 || j == 0) {
            resultSet.add(path.reverse().toString());
            path.reverse(); // undo reversal
            return;
        }

        if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
            path.append(s1.charAt(i - 1));
            dfs(s1, s2, i - 1, j - 1, dp, path, resultSet);
            path.deleteCharAt(path.length() - 1);
        } else {
            if (dp[i - 1][j] >= dp[i][j - 1]) {
                dfs(s1, s2, i - 1, j, dp, path, resultSet);
            }
            if (dp[i][j - 1] >= dp[i - 1][j]) {
                dfs(s1, s2, i, j - 1, dp, path, resultSet);
            }
        }
    }

}
